{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","replace","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","alert","addEventListener","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56f5a274.chunk.js","sourcesContent":["let accessToken;\nconst clientId = \"c3f7f34cdf5c4f3e831b91ca134bc6d1\";\nconst redirectUri = \"https://lucitemple.github.io/jamming/\"; // Must match spotify app setting exactly & include trailing slash.\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    // check for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      accessToken = accessToken.replace(\"=\", \"\"); // troubleshooting\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map((track) => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n        }));\n      });\n  },\n  // name = playlist name\n  savePlayList(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    let userId;\n\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headers,\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({ name: name })\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            const playlistId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n              {\n                headers: headers,\n                method: \"POST\",\n                body: JSON.stringify({ uris: trackUris }),\n              }\n            );\n          });\n      });\n  },\n};\n\nexport default Spotify;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nexport default class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: \"\"\n    };\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input\n          placeholder=\"Enter A Song, Album, or Artist\"\n          onChange={this.handleTermChange}\n        />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Track.css\";\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return (\n        <button className=\"Track-action\" onClick={this.removeTrack}>\n          -\n        </button>\n      );\n    } else {\n      return (\n        <button className=\"Track-action\" onClick={this.addTrack}>\n          +\n        </button>\n      );\n    }\n  }\n\n  addTrack(props) {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack(props) {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p >\n            {this.props.track.artist} | {this.props.track.album}\n          </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;\n","import React from \"react\";\nimport Track from \"../Track/Track.js\";\nimport \"./TrackList.css\";\n\nexport default class TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map((track) => {\n          return (\n            <Track\n              track={track}\n              key={track.id}\n              onAdd={this.props.onAdd}\n              onRemove={this.props.onRemove}\n              isRemoval={this.props.isRemoval}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport TrackList from \"../TrackList/TrackList\";\nimport \"./SearchResults.css\";\n\nexport default class SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList\n          tracks={this.props.searchResults}\n          onAdd={this.props.onAdd}\n          isRemoval={false}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport TrackList from \"../TrackList/TrackList.js\";\nimport \"./Playlist.css\";\n\nexport default class Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input defaultValue={\"New Playlist Name\"} onChange={this.handleNameChange} />\n        <TrackList\n          tracks={this.props.playlistTracks}\n          onRemove={this.props.onRemove}\n          isRemoval={true}\n        />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>\n          SAVE TO SPOTIFY\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: \"New Playlist Name\",\n      playlistTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((savedTrack) => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks.filter(\n      (currentTrack) => track.id !== currentTrack.id\n    );\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    let trackUris = this.state.playlistTracks.map((track) => track.uri);\n    if (trackUris && trackUris.length) {\n      Spotify.savePlayList(this.state.playlistName, trackUris).then(() => {\n        this.setState({\n          playlistName: \"New Playlist Name\",\n          playlistTracks: [],\n        });\n      });\n    } else {\n      alert(\"Your playlist is empty! Please add tracks.\");\n    }\n  }\n\n  search(term) {\n    Spotify.search(term).then((searchResults) => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onSearch={this.search}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    window.addEventListener(\"load\", () => {\n      Spotify.getAccessToken();\n    });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}